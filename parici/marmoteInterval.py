# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_marmoteInterval')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_marmoteInterval')
    _marmoteInterval = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_marmoteInterval', [dirname(__file__)])
        except ImportError:
            import _marmoteInterval
            return _marmoteInterval
        try:
            _mod = imp.load_module('_marmoteInterval', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _marmoteInterval = swig_import_helper()
    del swig_import_helper
else:
    import _marmoteInterval
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class marmoteSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, marmoteSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, marmoteSet, name)
    __repr__ = _swig_repr
    UNION = _marmoteInterval.marmoteSet_UNION
    PRODUCT = _marmoteInterval.marmoteSet_PRODUCT
    SIMPLE = _marmoteInterval.marmoteSet_SIMPLE

    def __init__(self, *args):
        this = _marmoteInterval.new_marmoteSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_marmoteSet
    __del__ = lambda self: None

    def cardinal(self):
        return _marmoteInterval.marmoteSet_cardinal(self)

    def isFinite(self):
        return _marmoteInterval.marmoteSet_isFinite(self)

    def isSimple(self):
        return _marmoteInterval.marmoteSet_isSimple(self)

    def isUnion(self):
        return _marmoteInterval.marmoteSet_isUnion(self)

    def isProduct(self):
        return _marmoteInterval.marmoteSet_isProduct(self)

    def totNbDims(self):
        return _marmoteInterval.marmoteSet_totNbDims(self)

    def enumerate(self):
        return _marmoteInterval.marmoteSet_enumerate(self)

    def test_index_decode(self):
        return _marmoteInterval.marmoteSet_test_index_decode(self)

    def firstState(self, buffer):
        return _marmoteInterval.marmoteSet_firstState(self, buffer)

    def nextState(self, buffer):
        return _marmoteInterval.marmoteSet_nextState(self, buffer)

    def decodeState(self, index, buffer):
        return _marmoteInterval.marmoteSet_decodeState(self, index, buffer)

    def index(self, buffer):
        return _marmoteInterval.marmoteSet_index(self, buffer)

    def isZero(self, buffer):
        return _marmoteInterval.marmoteSet_isZero(self, buffer)

    def printState(self, *args):
        return _marmoteInterval.marmoteSet_printState(self, *args)
marmoteSet_swigregister = _marmoteInterval.marmoteSet_swigregister
marmoteSet_swigregister(marmoteSet)

class marmoteInterval(marmoteSet):
    __swig_setmethods__ = {}
    for _s in [marmoteSet]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, marmoteInterval, name, value)
    __swig_getmethods__ = {}
    for _s in [marmoteSet]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, marmoteInterval, name)
    __repr__ = _swig_repr

    def __init__(self, min, max):
        this = _marmoteInterval.new_marmoteInterval(min, max)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_marmoteInterval
    __del__ = lambda self: None

    def isFinite(self):
        return _marmoteInterval.marmoteInterval_isFinite(self)

    def isZero(self, buffer):
        return _marmoteInterval.marmoteInterval_isZero(self, buffer)

    def firstState(self, buffer):
        return _marmoteInterval.marmoteInterval_firstState(self, buffer)

    def nextState(self, buffer):
        return _marmoteInterval.marmoteInterval_nextState(self, buffer)

    def decodeState(self, index, buffer):
        return _marmoteInterval.marmoteInterval_decodeState(self, index, buffer)

    def index(self, buffer):
        return _marmoteInterval.marmoteInterval_index(self, buffer)

    def printState(self, out, buffer):
        return _marmoteInterval.marmoteInterval_printState(self, out, buffer)

    def enumerate(self):
        return _marmoteInterval.marmoteInterval_enumerate(self)
marmoteInterval_swigregister = _marmoteInterval.marmoteInterval_swigregister
marmoteInterval_swigregister(marmoteInterval)

class transitionStructure(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, transitionStructure, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, transitionStructure, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _marmoteInterval.delete_transitionStructure
    __del__ = lambda self: None

    def size(self):
        return _marmoteInterval.transitionStructure_size(self)

    def origSize(self):
        return _marmoteInterval.transitionStructure_origSize(self)

    def destSize(self):
        return _marmoteInterval.transitionStructure_destSize(self)

    def type(self):
        return _marmoteInterval.transitionStructure_type(self)

    def uniformizationRate(self):
        return _marmoteInterval.transitionStructure_uniformizationRate(self)

    def setType(self, t):
        return _marmoteInterval.transitionStructure_setType(self, t)

    def setUniformizationRate(self, rate):
        return _marmoteInterval.transitionStructure_setUniformizationRate(self, rate)

    def setEntry(self, i, j, val):
        return _marmoteInterval.transitionStructure_setEntry(self, i, j, val)

    def getEntry(self, i, j):
        return _marmoteInterval.transitionStructure_getEntry(self, i, j)

    def getNbElts(self, i):
        return _marmoteInterval.transitionStructure_getNbElts(self, i)

    def getCol(self, i, k):
        return _marmoteInterval.transitionStructure_getCol(self, i, k)

    def getEntryByCol(self, i, k):
        return _marmoteInterval.transitionStructure_getEntryByCol(self, i, k)

    def getTransDistrib(self, i):
        return _marmoteInterval.transitionStructure_getTransDistrib(self, i)

    def readEntry(self, input):
        return _marmoteInterval.transitionStructure_readEntry(self, input)

    def rowSum(self, i):
        return _marmoteInterval.transitionStructure_rowSum(self, i)

    def copy(self):
        return _marmoteInterval.transitionStructure_copy(self)

    def uniformize(self):
        return _marmoteInterval.transitionStructure_uniformize(self)

    def embed(self):
        return _marmoteInterval.transitionStructure_embed(self)

    def evaluateMeasure(self, *args):
        return _marmoteInterval.transitionStructure_evaluateMeasure(self, *args)

    def evaluateValue(self, v, res):
        return _marmoteInterval.transitionStructure_evaluateValue(self, v, res)

    def write(self, out, format):
        return _marmoteInterval.transitionStructure_write(self, out, format)

    def toString(self, format):
        return _marmoteInterval.transitionStructure_toString(self, format)
transitionStructure_swigregister = _marmoteInterval.transitionStructure_swigregister
transitionStructure_swigregister(transitionStructure)

class SCC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCC, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _marmoteInterval.SCC_id_set
    __swig_getmethods__["id"] = _marmoteInterval.SCC_id_get
    if _newclass:
        id = _swig_property(_marmoteInterval.SCC_id_get, _marmoteInterval.SCC_id_set)
    __swig_setmethods__["period"] = _marmoteInterval.SCC_period_set
    __swig_getmethods__["period"] = _marmoteInterval.SCC_period_get
    if _newclass:
        period = _swig_property(_marmoteInterval.SCC_period_get, _marmoteInterval.SCC_period_set)
    __swig_setmethods__["states"] = _marmoteInterval.SCC_states_set
    __swig_getmethods__["states"] = _marmoteInterval.SCC_states_get
    if _newclass:
        states = _swig_property(_marmoteInterval.SCC_states_get, _marmoteInterval.SCC_states_set)

    def __lt__(self, a):
        return _marmoteInterval.SCC___lt__(self, a)

    def __init__(self):
        this = _marmoteInterval.new_SCC()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_SCC
    __del__ = lambda self: None
SCC_swigregister = _marmoteInterval.SCC_swigregister
SCC_swigregister(SCC)

class sparseMatrix(transitionStructure):
    __swig_setmethods__ = {}
    for _s in [transitionStructure]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, sparseMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [transitionStructure]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, sparseMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _marmoteInterval.new_sparseMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_sparseMatrix
    __del__ = lambda self: None

    def setEntry(self, row, col, val):
        return _marmoteInterval.sparseMatrix_setEntry(self, row, col, val)

    def getEntry(self, arg2, arg3):
        return _marmoteInterval.sparseMatrix_getEntry(self, arg2, arg3)

    def getNbElts(self, row):
        return _marmoteInterval.sparseMatrix_getNbElts(self, row)

    def getCol(self, row, numCol):
        return _marmoteInterval.sparseMatrix_getCol(self, row, numCol)

    def getEntryByCol(self, row, numCol):
        return _marmoteInterval.sparseMatrix_getEntryByCol(self, row, numCol)

    def getTransDistrib(self, row):
        return _marmoteInterval.sparseMatrix_getTransDistrib(self, row)

    def rowSum(self, row):
        return _marmoteInterval.sparseMatrix_rowSum(self, row)

    def evaluateMeasure(self, *args):
        return _marmoteInterval.sparseMatrix_evaluateMeasure(self, *args)

    def evaluateValue(self, v, res):
        return _marmoteInterval.sparseMatrix_evaluateValue(self, v, res)

    def evaluateValueState(self, v, stateIndex):
        return _marmoteInterval.sparseMatrix_evaluateValueState(self, v, stateIndex)

    def copy(self):
        return _marmoteInterval.sparseMatrix_copy(self)

    def uniformize(self):
        return _marmoteInterval.sparseMatrix_uniformize(self)

    def embed(self):
        return _marmoteInterval.sparseMatrix_embed(self)

    def diagnose(self, out):
        return _marmoteInterval.sparseMatrix_diagnose(self, out)

    def write(self, out, format):
        return _marmoteInterval.sparseMatrix_write(self, out, format)

    def addToEntry(self, row, col, val):
        return _marmoteInterval.sparseMatrix_addToEntry(self, row, col, val)

    def normalize(self):
        return _marmoteInterval.sparseMatrix_normalize(self)

    def getStronglyConnectedComponents(self, ignore=0.0):
        return _marmoteInterval.sparseMatrix_getStronglyConnectedComponents(self, ignore)
sparseMatrix_swigregister = _marmoteInterval.sparseMatrix_swigregister
sparseMatrix_swigregister(sparseMatrix)

DISCRETE = _marmoteInterval.DISCRETE
CONTINUOUS = _marmoteInterval.CONTINUOUS
UNKNOWN = _marmoteInterval.UNKNOWN
INFINITE_STATE_SPACE_SIZE = _marmoteInterval.INFINITE_STATE_SPACE_SIZE
class solutionMDP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, solutionMDP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, solutionMDP, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _marmoteInterval.new_solutionMDP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_solutionMDP
    __del__ = lambda self: None

    def writeSolution(self):
        return _marmoteInterval.solutionMDP_writeSolution(self)

    def setSize(self, s):
        return _marmoteInterval.solutionMDP_setSize(self, s)
solutionMDP_swigregister = _marmoteInterval.solutionMDP_swigregister
solutionMDP_swigregister(solutionMDP)

class genericMDP(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genericMDP, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genericMDP, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def writeMDP(self):
        return _marmoteInterval.genericMDP_writeMDP(self)
    __swig_destroy__ = _marmoteInterval.delete_genericMDP
    __del__ = lambda self: None

    def cost_perStage(self, rews):
        return _marmoteInterval.genericMDP_cost_perStage(self, rews)

    def clearRew(self):
        return _marmoteInterval.genericMDP_clearRew(self)

    def valueIteration(self, epsilon, maxIter):
        return _marmoteInterval.genericMDP_valueIteration(self, epsilon, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _marmoteInterval.genericMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, moyIter):
        return _marmoteInterval.genericMDP_policyIterationModified(self, epsilon, maxIter, delta, moyIter)

    def policyIteration(self, maxIter):
        return _marmoteInterval.genericMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _marmoteInterval.genericMDP_policyCost(self, policy, epsilon, maxIter)
genericMDP_swigregister = _marmoteInterval.genericMDP_swigregister
genericMDP_swigregister(genericMDP)

class averageMDP(genericMDP):
    __swig_setmethods__ = {}
    for _s in [genericMDP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, averageMDP, name, value)
    __swig_getmethods__ = {}
    for _s in [genericMDP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, averageMDP, name)
    __repr__ = _swig_repr

    def writeMDP(self):
        return _marmoteInterval.averageMDP_writeMDP(self)

    def __init__(self, *args):
        this = _marmoteInterval.new_averageMDP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_averageMDP
    __del__ = lambda self: None

    def changeIndex(self, index):
        return _marmoteInterval.averageMDP_changeIndex(self, index)

    def valueIteration(self, epsilon, maxIter):
        return _marmoteInterval.averageMDP_valueIteration(self, epsilon, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _marmoteInterval.averageMDP_valueIterationGS(self, epsilon, maxIter)

    def relativeValueIteration(self, epsilon, maxIter):
        return _marmoteInterval.averageMDP_relativeValueIteration(self, epsilon, maxIter)

    def policyIteration(self, maxIter):
        return _marmoteInterval.averageMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _marmoteInterval.averageMDP_policyCost(self, policy, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _marmoteInterval.averageMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)
averageMDP_swigregister = _marmoteInterval.averageMDP_swigregister
averageMDP_swigregister(averageMDP)

class totalRewardMDP(genericMDP):
    __swig_setmethods__ = {}
    for _s in [genericMDP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, totalRewardMDP, name, value)
    __swig_getmethods__ = {}
    for _s in [genericMDP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, totalRewardMDP, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _marmoteInterval.delete_totalRewardMDP
    __del__ = lambda self: None

    def writeMDP(self):
        return _marmoteInterval.totalRewardMDP_writeMDP(self)

    def valueIteration(self, epsilon, maxIter):
        return _marmoteInterval.totalRewardMDP_valueIteration(self, epsilon, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _marmoteInterval.totalRewardMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIteration(self, maxIter):
        return _marmoteInterval.totalRewardMDP_policyIteration(self, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _marmoteInterval.totalRewardMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)
totalRewardMDP_swigregister = _marmoteInterval.totalRewardMDP_swigregister
totalRewardMDP_swigregister(totalRewardMDP)


def verifVd(arg1, arg2):
    return _marmoteInterval.verifVd(arg1, arg2)
verifVd = _marmoteInterval.verifVd

def verifVi(arg1, arg2):
    return _marmoteInterval.verifVi(arg1, arg2)
verifVi = _marmoteInterval.verifVi

def verifMat(arg1, arg2):
    return _marmoteInterval.verifMat(arg1, arg2)
verifMat = _marmoteInterval.verifMat

def verifMat2D(arg1, arg2, arg3):
    return _marmoteInterval.verifMat2D(arg1, arg2, arg3)
verifMat2D = _marmoteInterval.verifMat2D

def verifMatP(arg1, arg2):
    return _marmoteInterval.verifMatP(arg1, arg2)
verifMatP = _marmoteInterval.verifMatP

def produitMatVect(arg1, arg2, arg3):
    return _marmoteInterval.produitMatVect(arg1, arg2, arg3)
produitMatVect = _marmoteInterval.produitMatVect

def produitMatMat(arg1, arg2, arg3):
    return _marmoteInterval.produitMatMat(arg1, arg2, arg3)
produitMatMat = _marmoteInterval.produitMatMat

def prodScalV(arg1, arg2):
    return _marmoteInterval.prodScalV(arg1, arg2)
prodScalV = _marmoteInterval.prodScalV

def Norm(arg1, arg2, arg3):
    return _marmoteInterval.Norm(arg1, arg2, arg3)
Norm = _marmoteInterval.Norm

def Span(arg1, arg2, arg3):
    return _marmoteInterval.Span(arg1, arg2, arg3)
Span = _marmoteInterval.Span

def SpanRecup(U, V, Size, max, min):
    return _marmoteInterval.SpanRecup(U, V, Size, max, min)
SpanRecup = _marmoteInterval.SpanRecup

def Transpose(arg1, arg2):
    return _marmoteInterval.Transpose(arg1, arg2)
Transpose = _marmoteInterval.Transpose

def ResolutionSysLin(arg1, arg2, arg3):
    return _marmoteInterval.ResolutionSysLin(arg1, arg2, arg3)
ResolutionSysLin = _marmoteInterval.ResolutionSysLin

def Inversion(arg1, arg2, arg3):
    return _marmoteInterval.Inversion(arg1, arg2, arg3)
Inversion = _marmoteInterval.Inversion

def CalculPI(arg1, arg2):
    return _marmoteInterval.CalculPI(arg1, arg2)
CalculPI = _marmoteInterval.CalculPI

def CalculPIChaine(arg1, arg2):
    return _marmoteInterval.CalculPIChaine(arg1, arg2)
CalculPIChaine = _marmoteInterval.CalculPIChaine
class nonStationarySolutionMDP(solutionMDP):
    __swig_setmethods__ = {}
    for _s in [solutionMDP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonStationarySolutionMDP, name, value)
    __swig_getmethods__ = {}
    for _s in [solutionMDP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, nonStationarySolutionMDP, name)
    __repr__ = _swig_repr

    def __init__(self, h):
        this = _marmoteInterval.new_nonStationarySolutionMDP(h)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_nonStationarySolutionMDP
    __del__ = lambda self: None

    def writeSolution(self):
        return _marmoteInterval.nonStationarySolutionMDP_writeSolution(self)

    def setAction(self, step, a):
        return _marmoteInterval.nonStationarySolutionMDP_setAction(self, step, a)

    def setValue(self, step, t):
        return _marmoteInterval.nonStationarySolutionMDP_setValue(self, step, t)

    def setActionIndex(self, step, indice, value):
        return _marmoteInterval.nonStationarySolutionMDP_setActionIndex(self, step, indice, value)

    def getActionIndex(self, step, indice):
        return _marmoteInterval.nonStationarySolutionMDP_getActionIndex(self, step, indice)
nonStationarySolutionMDP_swigregister = _marmoteInterval.nonStationarySolutionMDP_swigregister
nonStationarySolutionMDP_swigregister(nonStationarySolutionMDP)

class feedbackSolutionMDP(solutionMDP):
    __swig_setmethods__ = {}
    for _s in [solutionMDP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, feedbackSolutionMDP, name, value)
    __swig_getmethods__ = {}
    for _s in [solutionMDP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, feedbackSolutionMDP, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _marmoteInterval.new_feedbackSolutionMDP()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_feedbackSolutionMDP
    __del__ = lambda self: None

    def setAction(self, a):
        return _marmoteInterval.feedbackSolutionMDP_setAction(self, a)

    def setValue(self, t):
        return _marmoteInterval.feedbackSolutionMDP_setValue(self, t)

    def setActionIndex(self, indice, value):
        return _marmoteInterval.feedbackSolutionMDP_setActionIndex(self, indice, value)

    def getActionIndex(self, indice):
        return _marmoteInterval.feedbackSolutionMDP_getActionIndex(self, indice)

    def getValueIndex(self, indice):
        return _marmoteInterval.feedbackSolutionMDP_getValueIndex(self, indice)

    def writeSolution(self):
        return _marmoteInterval.feedbackSolutionMDP_writeSolution(self)
feedbackSolutionMDP_swigregister = _marmoteInterval.feedbackSolutionMDP_swigregister
feedbackSolutionMDP_swigregister(feedbackSolutionMDP)

class discountedMDP(genericMDP):
    __swig_setmethods__ = {}
    for _s in [genericMDP]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, discountedMDP, name, value)
    __swig_getmethods__ = {}
    for _s in [genericMDP]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, discountedMDP, name)
    __repr__ = _swig_repr

    def writeMDP(self):
        return _marmoteInterval.discountedMDP_writeMDP(self)

    def __init__(self, *args):
        this = _marmoteInterval.new_discountedMDP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _marmoteInterval.delete_discountedMDP
    __del__ = lambda self: None

    def valueIteration(self, epsilon, maxIter):
        return _marmoteInterval.discountedMDP_valueIteration(self, epsilon, maxIter)

    def valueIterationGS(self, epsilon, maxIter):
        return _marmoteInterval.discountedMDP_valueIterationGS(self, epsilon, maxIter)

    def policyIterationModified(self, epsilon, maxIter, delta, maxInIter):
        return _marmoteInterval.discountedMDP_policyIterationModified(self, epsilon, maxIter, delta, maxInIter)

    def policyIteration(self, maxIter):
        return _marmoteInterval.discountedMDP_policyIteration(self, maxIter)

    def policyCost(self, policy, epsilon, maxIter):
        return _marmoteInterval.discountedMDP_policyCost(self, policy, epsilon, maxIter)

    def policyCostbyIndex(self, policy, epsilon, maxIter):
        return _marmoteInterval.discountedMDP_policyCostbyIndex(self, policy, epsilon, maxIter)
discountedMDP_swigregister = _marmoteInterval.discountedMDP_swigregister
discountedMDP_swigregister(discountedMDP)

# This file is compatible with both classic and new-style classes.


